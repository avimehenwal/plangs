(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{541:function(t,s,a){t.exports=a.p+"assets/img/web-developer-toolchain.686ed880.png"},651:function(t,s,a){"use strict";a.r(s);var e=a(7),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"typescript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[t._v("#")]),t._v(" ðŸ‘ª Typescript")]),t._v(" "),e("TagLinks"),t._v(" "),e("p",[t._v("Why we need it? To help us write better code for compiler, and so compiler\ncan do its job more efficiently.\nDoes it mean typescript is faster than javascript?")]),t._v(" "),e("article",{staticClass:"quote"},[e("div",{staticClass:"body"},[e("p",[t._v("Just another flavour of javascript")])]),e("footer",{staticClass:"author"},[t._v("~ Microsoft")])]),e("dl",[e("dt",[t._v("How do I compile and run typescript while developing to get realtime feedback?")]),t._v(" "),e("dd",[e("p",[t._v("Use "),e("a",{attrs:{href:"https://www.npmjs.com/package/nodemon",target:"_blank",rel:"noopener noreferrer"}},[t._v("nodemon package"),e("OutboundLink")],1),t._v(" and ask bash to asynchronously run "),e("code",[t._v("tsc --watch")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://mywiki.wooledge.org/BashSheet#:~:text=An%20ampersand%20does%20the%20same,for%20the%20former%20to%20end.",target:"_blank",rel:"noopener noreferrer"}},[t._v("From bash reference"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("A single ampersand terminates an asynchronous command. An ampersand does the same thing as a semicolon or newline in that it indicates the end of a command, but it causes Bash to execute the command asynchronously. That means Bash will run it in the background and run the next command immediately after, without waiting for the former to end. Only the command before the & is executed asynchronously and you must not put a ; after the &, the & replaces the ;.")])])]),t._v(" "),e("p",[e("img",{staticClass:"lazy",attrs:{alt:"web developer toolchain","data-src":a(541),loading:"lazy"}})]),t._v(" "),e("h2",{attrs:{id:"interfaces"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#interfaces"}},[t._v("#")]),t._v(" ðŸ”· Interfaces")]),t._v(" "),e("ul",[e("li",[t._v("properties with types")]),t._v(" "),e("li",[t._v("optional properties")]),t._v(" "),e("li",[t._v("readonly properties")]),t._v(" "),e("li",[t._v("Interfaces for\n"),e("ul",[e("li",[t._v("functions,")]),t._v(" "),e("li",[t._v("objects,")]),t._v(" "),e("li",[t._v("class")])])])]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("div",{staticClass:"highlight-lines"},[e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("div",{staticClass:"highlighted"},[t._v("Â ")]),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br")]),e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Shape of data information for compiler\n * Argument of type '{ size: number; }' is not assignable to parameter of type 'ILabeledValue'.\n * Property 'label' is missing in type '{ size: number; }' but required in type 'ILabeledValue'.\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ILabeledValue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  label"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// optional properties")]),t._v("\n  size"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// readonly properties")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("readonly")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Function interface")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")])]),t._v(" IPrintLabelFunc "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * using interface\n * @param labeledObj\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printLabel")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("labeledObj"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ILabeledValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("from function using interface")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("labeledObj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * without interface\n * @param labeledObj\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printLabel1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("labeledObj"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" label"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("from function NOT using interface")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("labeledObj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myObj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  size"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  label"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Size 10 Object"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  y"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// MAIN")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printLabel")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myObj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printLabel1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myObj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])]),e("h2",{attrs:{id:"might-be-interesting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#might-be-interesting"}},[t._v("#")]),t._v(" ðŸ—ž might be interesting")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/palantir/tslint/issues/4534",target:"_blank",rel:"noopener noreferrer"}},[t._v("tslint is being merged to eslint"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/babel-with-typescript.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("babel vs tsc?"),e("OutboundLink")],1)])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("babela and typescript")]),t._v(" "),e("p",[t._v("Babel 7 has built-in TypeScript syntax support.")]),t._v(" "),e("p",[t._v("This means that projects using Babel can now use TypeScript, without ever needing to complicate their builds with the TypeScript compiler.")])]),t._v(" "),e("dl",[e("dt",[t._v("But what are the differences between using Babel and the TypeScript compiler? "),e("a",{attrs:{href:"https://blog.logrocket.com/choosing-between-babel-and-typescript-4ed1ad563e41/#:~:text=TypeScript%20by%20default%20compiles%20an,widespread%20is%20probably%20const%20enums%20.",target:"_blank",rel:"noopener noreferrer"}},[t._v("And should you use Babel or TypeScript for your next project?"),e("OutboundLink")],1)]),t._v(" "),e("dd",[e("p",[t._v("babel vs typescript compiler")]),t._v(" "),e("ol",[e("li",[t._v("TypeScript by default compiles an entire project at once, while Babel only compiles one file at a time.")])])])]),t._v(" "),e("h2",{attrs:{id:"interfaces-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#interfaces-2"}},[t._v("#")]),t._v(" Interfaces")]),t._v(" "),e("dl",[e("dt",[t._v("Difference between implements and extends a class ?")]),t._v(" "),e("dd",[e("p",[t._v("A class could extend to an interface as well as implement an interface.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("keyword")]),t._v(" "),e("th",[t._v("description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("implements")]),t._v(" "),e("td",[t._v("same shape, but NOT a child, commonly used with Interfaces")])]),t._v(" "),e("tr",[e("td",[t._v("extends")]),t._v(" "),e("td",[t._v("new class as a child, with all parents properties")])])])]),t._v(" "),e("p",[t._v("Implements a new class means,")])])]),t._v(" "),e("h2",{attrs:{id:"generic-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generic-types"}},[t._v("#")]),t._v(" Generic Types")]),t._v(" "),e("p",[t._v("Creating types from types")]),t._v(" "),e("ul",[e("li",[t._v("How to add "),e("strong",[t._v("constraints")]),t._v(" to generic types? extend generic to interface")])]),t._v(" "),e("h2",{attrs:{id:"advanced-typescript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#advanced-typescript"}},[t._v("#")]),t._v(" Advanced Typescript")]),t._v(" "),e("ul",[e("li",[t._v("How to make an array immutable? "),e("code",[t._v("const a = [1,2,3,4,5] as const")])]),t._v(" "),e("li",[t._v("How to let ts check if an array has an index? "),e("code",[t._v("const b = a[10]")])])]),t._v(" "),e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" ðŸ“• References")]),t._v(" "),e("Footer")],1)}),[],!1,null,null,null);s.default=n.exports}}]);