(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{628:function(t,s,a){"use strict";a.r(s);var e=a(7),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"collections"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collections"}},[t._v("#")]),t._v(" Collections")]),t._v(" "),a("TagLinks"),t._v(" "),a("p",[t._v("How to ....?")]),t._v(" "),a("ol",[a("li",[t._v("declare?")]),t._v(" "),a("li",[t._v("add to?")]),t._v(" "),a("li",[t._v("remove from?")]),t._v(" "),a("li",[t._v("check is exists?")]),t._v(" "),a("li",[t._v("merge into?")]),t._v(" "),a("li",[t._v("can they nest?")])]),t._v(" "),a("h2",{attrs:{id:"sets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sets"}},[t._v("#")]),t._v(" Sets")]),t._v(" "),a("p",[t._v("just like maths, unordered with no duplicates")]),t._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[t._v("def")]),t._v(" players #{"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Alice"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Kelly"')]),t._v("}"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[t._v("conj")]),t._v(" players "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fred"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[t._v("disj")]),t._v(" players "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sal"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[t._v("contains")]),t._v("? players "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Kelly"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("Merge one collection INTO another collection?")])]),t._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[t._v("def")]),t._v(" players #{"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Alice"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Kelly"')]),t._v("}"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[t._v("def")]),t._v(" new-players "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tim"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sue"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Greg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[t._v("into")]),t._v(" players new-players"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"hased-maps-maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hased-maps-maps"}},[t._v("#")]),t._v(" Hased Maps | Maps")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("operation")]),t._v(" "),a("th",[t._v("sets")]),t._v(" "),a("th",[t._v("maps")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("declare")]),t._v(" "),a("td",[a("code",[t._v("def #{}")])]),t._v(" "),a("td",[a("code",[t._v("def {}")])])]),t._v(" "),a("tr",[a("td",[t._v("add to")]),t._v(" "),a("td",[a("code",[t._v("conj")])]),t._v(" "),a("td",[a("code",[t._v("assoc")])])]),t._v(" "),a("tr",[a("td",[t._v("remove")]),t._v(" "),a("td",[a("code",[t._v("disj")])]),t._v(" "),a("td",[a("code",[t._v("dissoc")])])]),t._v(" "),a("tr",[a("td",[t._v("lookup")]),t._v(" "),a("td",[a("code",[t._v("contains?")])]),t._v(" "),a("td",[a("code",[t._v("get")]),t._v(", "),a("code",[t._v("contains?")])])]),t._v(" "),a("tr",[a("td",[t._v("sub")]),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("keys")]),t._v(", "),a("code",[t._v("vals")])])]),t._v(" "),a("tr",[a("td",[t._v("merging")]),t._v(" "),a("td",[a("code",[t._v("into")])]),t._v(" "),a("td",[a("code",[t._v("merge")])])]),t._v(" "),a("tr",[a("td",[t._v("sorted")]),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("sorted-map")])])])])]),t._v(" "),a("ul",{staticClass:"task-list"},[a("li",[t._v("Look up with a default, assign default values if not found")]),t._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"markdown-todo",attrs:{disabled:"true",type:"checkbox",checked:"true"}}),t._v(" great for representing Domain Objects")]),t._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"markdown-todo",attrs:{disabled:"true",type:"checkbox"}}),t._v(" Use "),a("code",[t._v("Records")]),t._v(" for polymorphic behaviour, OO styled interfaces "),a("code",[t._v("protocols")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("statements vs expressions")]),t._v(" "),a("p",[t._v("expressions return values, whereas statements do not")])]),t._v(" "),a("h2",{attrs:{id:"programming-styles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#programming-styles"}},[t._v("#")]),t._v(" Programming Styles")]),t._v(" "),a("ul",[a("li",[t._v("Use "),a("code",[t._v("do")]),t._v(" blocks with "),a("code",[t._v("if")]),t._v(" only if your bodies have side effects! (Why?)")])]),t._v(" "),a("h2",{attrs:{id:"branching-conditional-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branching-conditional-flow"}},[t._v("#")]),t._v(" Branching / Conditional Flow")]),t._v(" "),a("p",[t._v("using")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("if")]),t._v(" and "),a("code",[t._v("if do")])]),t._v(" "),a("li",[a("code",[t._v("when")])]),t._v(" "),a("li",[a("code",[t._v("cond")]),t._v(" and "),a("code",[t._v("else")])])]),t._v(" "),a("blockquote",[a("p",[t._v("Whats the difference b/w "),a("code",[t._v("if")]),t._v(" and "),a("code",[t._v("when")]),t._v("?")])]),t._v(" "),a("p",[t._v("if - handle both trythy and falsey Branching. Side-effects in "),a("code",[t._v("do")]),t._v(" block\nwhen - only when truthy cndition has to be handleded")]),t._v(" "),a("Footer")],1)}),[],!1,null,null,null);s.default=n.exports}}]);